---
layout: post
title:      "What if a robot could laugh at your jokes?"
date:       2020-07-02 19:56:10 +0000
permalink:  what_if_a_robot_could_laugh_at_your_jokes
---


Stand-up comedy is an art that has always appealed to me. It is raw and personal, yet at the same time it can be universal and insightful.

In this study I look at whether we can apply Natural Language Processing to stand-up comedy and predict where laughter will occur based on hidden patterns of language. Does a robot have a sense of humor? Can it laugh at your jokes?
The content of your blog post goes here.

**Joke Structure**

Before we start, here’s a quick review on joke structure. I promise it will be quick because ...

> "analyzing humor is like dissecting a frog. Few people are interested and the frog dies of it." – E.B. White

There are two part to a joke: the setup and the punch line. The setup is important to give the joke context. It is made up of a topic, the comedian’s attitude, and a premise or opinion.  A good premise is specific, original and insightful. The setup is not funny in itself, but it provides the background that makes the punch line funny. The punch line shatters the expectation set by the premise through delivery, timing, stage presence, or an act out.

**Why this project might work**

Stand-up comedy needs clarity and an economy of words. This may make it well suited to Natural Language Processing. It also has a repetitive structure to it, which could be identifiable. One comedy tool, the rule of threes (where the third element is a surprise), may also work well with NLP. Measuring changing comedy styles may also be possible. Modern comedy is more story based, rather than joking telling. This change may be visible with NLP.


**Or ... Are you kidding me? This project will never work**

Laughter detection is an impossible problem to solve. Stand-up comedy depends on prior experiences, assumptions, and even nuances of language. It is regional, time-based (jokes become dated) and people’s opinion of funny varies by age, culture and upbringing. Many of the laughs are generated by the comedian’s tone, facial expression, body language, stage presence and persona. How can we model that using text alone? A comedian can experience different laughter on different nights – using the exact same material. 

**Obtain Data**

In getting the data there were three things to consider – which comedy sets to use, how to get the transcripts, and how to measure the laughter. Fortunately, there is a great website filled with over 300 stand-up comedy transcripts.

[Scrapsfromtheloft]([https://scrapsfromtheloft.com/stand-up-comedy-scripts/)


I built a scraper using Selenium and manipulated the transcripts into a pandas dataframe. The next step was to tag the laughter. Speech recognition and laughter detection algorithms didn’t work as well as I’d hoped. For the recent Netflix Seinfeld promo, instead of this:

> “You and I know each other, on a certain level, for many, many years”

speech recognition gave me:

> “Jula I know each other One Love Mary Mary Years Eve gorąca”

… which I’ve got to admit is pretty funny, if it a little absurd.

Then what actually is a laugh? I know it when I hear it, but do you measure when the laughter starts? When it peaks? Or do you try to estimate the word that triggered the laugh? 


**Scrub the Data**

Tagging laughs meant viewing each comedy set in detail. I decided to start with the comedians that I had the most transcripts for. After finishing just George Carlin and Dave Chappelle, I blew out my time budget.

![Dataframe](https://imgur.com/a/EyAgbIY)

**Exploring the Data**

It turns out that my dataset was somewhat imbalanced. Laughter was about twice as common as non-laughter. I initially brought in some dummy text to balance the data, but it created a new problem – predicting laughter became too easy. I applied some real world thinking and decided that I was ok with the imbalance. My goal was to predict laughter out of a comedy set, not out of text in general. It makes sense that there should be more laughter than not. That’s the point of a comedy show … if laughter was rare, that’d be the end of that comedian. 

![Count](https://imgur.com/08rC6Bu)

![Carlin](https://imgur.com/a/deDrGVg)

**Model the Data**

I started with a basic regression model, and found that it was pretty good at predicting laughter … really good in fact. It decided that almost every line was funny. My deepest fears were confirmed. Robots were indeed ineffective connoisseurs of comedy.

![Regression](https://imgur.com/a/9fjkaeL)

Not giving up yet, I still had a couple of tricks up my sleeve. Time to bring out the neural networks. A basic Convolutional Neural Network worked remarkably well – returning an accuracy of 82%. RNN, LSTM, GRU models did not fare so well. My thoughts are that this dataset was too small for these models to be effective.

```
model = Sequential()
#first layer
model.add(Embedding(vocab_length, 1024, input_length=100)) #12000 words, 1024 dimensions
model.add(SpatialDropout1D(0.2))
# second layer
model.add(Conv1D(512, 3, activation='relu')) #256 filters, 3 kernel lengths - triplets of word emdeddings
model.add(GlobalMaxPooling1D())
# third layer
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.5))
# output layer
model.add(Dense(1, activation='sigmoid'))
```

![CNN](https://imgur.com/a/ZY9NyK8)

**Interpreting the Results**

Given the limited number of scripts, I’m not ready to make any final conclusion. However, results so far look promising. It appears that an algorithm may have a sense of humor. It would laugh at more than 8 out of every 10 jokes. On the other hand, like an awkward friend, it would have no qualms at yukking it up during the some of the quiet spells too. 
So, in a world of social distancing with no indoor human interaction … robots could be used for a stand-in audience. No two-drink minimum required.


[Johnny 5 - go to 0:59](https://www.youtube.com/watch?v=y7wj3bB6OU4)

**Next Steps**

Increase the dataset – I have a lot more comedy to watch! I’d also like to model what types of emotions generate the most laughs. I’d also like to apply some transfer learning from a pre-built model and attempt to generate some pseudo-comedy. Finally, it’d be really interesting to combine this NLP model with an image recognition model for facial expression and body language.

